refreshButton needs to be able to select a directory of audio books. Each audio book is contained in a folder (same name as the book). The separate audio files within the folder are the chapters (named accordingly). The app needs to store the chosen directory between sessions and display a list of all the audio books in the fragment_books.xml page.

// MainFragment.kt
. . . . . . . . . . . . . . .
private val pickFolderLauncher = registerForActivityResult(
    ActivityResultContracts.OpenDocumentTree()
) { uri ->
    if (uri != null) {
        // Persist permission so it's accessible next time
        requireContext().contentResolver.takePersistableUriPermission(
            uri, Intent.FLAG_GRANT_READ_URI_PERMISSION
        )
        
        // Save to SharedPreferences
        val prefs = requireContext().getSharedPreferences("audio_prefs", Context.MODE_PRIVATE)
        prefs.edit().putString("audiobook_dir", uri.toString()).apply()
    }
}

refreshButton.setOnClickListener {
    pickFolderLauncher.launch(null)
}


// BooksFragment.kt
. . . . . . . . . . . . . . .
override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
    super.onViewCreated(view, savedInstanceState)

    val prefs = requireContext().getSharedPreferences("audio_prefs", Context.MODE_PRIVATE)
    val uriString = prefs.getString("audiobook_dir", null)

    if (uriString != null) {
        val uri = Uri.parse(uriString)
        val books = getAudioBooksFromFolder(uri)
        
        // Assuming you have a RecyclerView in fragment_books.xml
        val recyclerView: RecyclerView = view.findViewById(R.id.booksRecyclerView)
        recyclerView.layoutManager = LinearLayoutManager(requireContext())
        recyclerView.adapter = BooksAdapter(books) // You'll need to make this
    }
}

private fun getAudioBooksFromFolder(folderUri: Uri): List<String> {
    val books = mutableListOf<String>()
    requireContext().contentResolver.query(
        DocumentsContract.buildChildDocumentsUriUsingTree(
            folderUri, DocumentsContract.getTreeDocumentId(folderUri)
        ),
        arrayOf(DocumentsContract.Document.COLUMN_DISPLAY_NAME, DocumentsContract.Document.COLUMN_MIME_TYPE),
        null, null, null
    )?.use { cursor ->
        while (cursor.moveToNext()) {
            val name = cursor.getString(0)
            val mime = cursor.getString(1)
            if (mime == DocumentsContract.Document.MIME_TYPE_DIR) {
                books.add(name) // This is a folder → a book
            }
        }
    }
    return books
}


// fragment_books.xml (RecyclerView to show book list dynamically)
. . . . . . . . . . . . . . .
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <Button
        style="@style/MyButtonStyle"
        android:id="@+id/closeButton"
        android:layout_width="70dp"
        android:layout_height="52dp"
        android:text="Close"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="10dp" />

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/booksRecyclerView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toBottomOf="@id/closeButton"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>


// BooksAdapter.kt (shows the books immediately after refresh)
. . . . . . . . . . . . . . .
package com.daveswaves.audioapp

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView

class BooksAdapter(
    private val books: List<String>,
    private val onClick: (String) -> Unit = {}
) : RecyclerView.Adapter<BooksAdapter.BookViewHolder>() {

    inner class BookViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        val bookTitle: TextView = itemView.findViewById(android.R.id.text1)

        init {
            itemView.setOnClickListener {
                val book = books[bindingAdapterPosition]
                onClick(book)
            }
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BookViewHolder {
        val view = LayoutInflater.from(parent.context)
            .inflate(android.R.layout.simple_list_item_1, parent, false)
        return BookViewHolder(view)
    }

    override fun onBindViewHolder(holder: BookViewHolder, position: Int) {
        holder.bookTitle.text = books[position]
    }

    override fun getItemCount(): Int = books.size
}


// How to hook up BooksAdapter in BooksFragment.kt
. . . . . . . . . . . . . . .
val recyclerView: RecyclerView = view.findViewById(R.id.booksRecyclerView)
recyclerView.layoutManager = LinearLayoutManager(requireContext())
recyclerView.adapter = BooksAdapter(books) { bookName ->
    // Handle book click — maybe open chapter list later
}





# # # # # # # # # # # # # # # # # # # # #

AudioApp/app/src/main/java/com/daveswaves/audioapp/(BookmarksFragment.kt|BooksFragment.kt|MainActivity.kt|MainFragment.kt|RecentFilesFragment.kt)
AudioApp/app/src/main/res/drawable/(default1.png|default2.png)
AudioApp/app/src/main/res/layout/(activity_main_copy.xml|activity_main.xml|fragment_bookmarks.xml|fragment_books.xml|fragment_main.xml|fragment_recent_files.xml)
AudioApp/app/src/main/res/mipmap-hdpi/(ic_launcher.png|ic_launcher_round.png)
AudioApp/app/src/main/res/mipmap-mdpi/(ic_launcher.png|ic_launcher_round.png)
AudioApp/app/src/main/res/mipmap-xhdpi/(ic_launcher.png|ic_launcher_round.png)
AudioApp/app/src/main/res/mipmap-xxhdpi/(ic_launcher.png|ic_launcher_round.png)
AudioApp/app/src/main/res/mipmap-xxxhdpi/(ic_launcher.png|ic_launcher_round.png)
AudioApp/app/src/main/res/values/styles.xml
AudioApp/app/src/main/AndroidManifest.xml
AudioApp/app/build.gradle.kts
AudioApp/(build.gradle.kts|gradle.properties|settings.gradle.kts)
